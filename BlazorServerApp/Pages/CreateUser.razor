
@page "/CreateUser" //The page directive, i.e. the URI to access this page.
@using Domain.DataTransferObjects
@using HttpClients.ClientInterfaces
@* The @inject directive in Blazor is used to inject a service or dependency into a Blazor component or page. *@
@inject IUserService UserService 


<div class="card">
    <h3>CreateUser</h3>
    <div class="form-group field">
        <label>User name:</label>
        
        @* The @bind attribute is two-way bind and is used to bind the username variable to the input element. 
        This means that whenever the user types something into the input field, the username variable will be updated with the new value. *@
        @* The @bind:event="oninput" attribute specifies that the binding should be updated on each keystroke, rather than on the blur event.
        We want the "oninput", because the button should be disabled, when there is nothing in the input field. *@
        
        <input type="text" @bind="username" @bind:event = "oninput">
        @if (!string.IsNullOrEmpty(resultMsg)) {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    
    <div class="button-row">
        @* it calls Create method on click *@
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(username))" class="acceptbtn">Create</button>
    </div>
</div>

@* This is my view-model *@
@code {
    private string username = "";
    private string resultMsg = "";
    private string color = "";

    private async Task Create() { //async Task acts as void

        resultMsg = "";

        try {
            await UserService.Create(new UserCreationDTO(username));
            username = "";
            resultMsg = "User successfully created";
            color = "green";
        }
        catch (Exception e) {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

}